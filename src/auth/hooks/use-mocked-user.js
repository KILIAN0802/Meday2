'use client';

import { _mock } from 'src/_mock';
import { useAuthContext } from 'src/auth/hooks';
import { AccountType, ACCOUNT_TYPE_KEY } from 'src/auth/context/jwt/constant';

// ----------------------------------------------------------------------

function normalizeUser(me, accountType) {
  if (!me) return null;

  const isStaff = accountType === AccountType.STAFF;
  const displayName = me.fullname || me.displayName || me.username || 'User';

  // map nhÃ£n role cho staff
  const staffRoleNumber = isStaff ? Number(me.role) : undefined;
  let roleLabel = 'Quáº£n trá»‹';
  if (isStaff) {
    roleLabel =
      staffRoleNumber === 1 ? 'BÃ¡c sÄ©'
      : staffRoleNumber === 2 ? 'Y tÃ¡'
      : 'NhÃ¢n viÃªn';
  }

  // secondaryLine: hiá»ƒn thá»‹ cáº£ role, username, fullname (tá»± áº©n pháº§n trá»‘ng)
  const parts = [
    roleLabel,
    me?.username || null,
    me?.fullname || null,
  ].filter(Boolean);
  const secondaryLine = parts.join(' â€¢ ');

  return {
    // GIá»® NGUYÃŠN dá»¯ liá»‡u tá»« backend
    id: me.id ?? null,
    username: me.username ?? null,
    fullname: me.fullname ?? null,         // staff cÃ³
    role: isStaff ? staffRoleNumber : undefined, // 1/2 cho staff
    createdAt: me.createdAt ?? null,
    updatedAt: me.updatedAt ?? null,

    // THÃŠM cÃ¡c field phá»¥c vá»¥ UI
    accountType: isStaff ? 'staff' : 'admin',
    roleLabel,                              // 'BÃ¡c sÄ©' / 'Y tÃ¡' / 'NhÃ¢n viÃªn' / 'Quáº£n trá»‹'
    displayName,                            // Æ°u tiÃªn fullname
    secondaryLine,                          // ðŸ‘‰ "BÃ¡c sÄ© â€¢ doctor.smith â€¢ Dr. John Smith"

    // avatar (náº¿u cáº§n fallback)
    photoURL: me.photoURL || _mock.image.avatar(24),

    _raw: me,
  };
}

function fallbackUser() {
  return {
    id: null,
    username: null,
    displayName: 'Guest',
    createdAt: null,
    updatedAt: null,
    photoURL: _mock.image.avatar(24),
    role: 'guest',
    roleLabel: 'KhÃ¡ch',
    secondaryLine: 'KhÃ¡ch',
    isPublic: false,
  };
}

// ----------------------------------------------------------------------

export function useMockedUser() {
  const { user: ctxUser, loading } = useAuthContext();

  const accountType =
    (ctxUser && ctxUser.userType) ||
    (typeof window !== 'undefined' && sessionStorage.getItem(ACCOUNT_TYPE_KEY)) ||
    AccountType.ADMIN;

  const normalized = normalizeUser(ctxUser, accountType) || fallbackUser();

  return { user: normalized, loading };
}
